<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>渣渣羊的进击</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zhazhayang.top/"/>
  <updated>2020-03-17T17:11:49.505Z</updated>
  <id>http://www.zhazhayang.top/</id>
  
  <author>
    <name>渣渣羊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前后端交互初试</title>
    <link href="http://www.zhazhayang.top/archives/20200318-flutter-frontAndBackEnd/"/>
    <id>http://www.zhazhayang.top/archives/20200318-flutter-frontAndBackEnd/</id>
    <published>2020-03-17T16:25:13.000Z</published>
    <updated>2020-03-17T17:11:49.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><pre><code>学习Springboot框架，初步尝试从前端打通到数据库的实验，但对知识未做太深的理解，仅从代码逻辑方面进行了分析与应用。</code></pre><h1 id="涉及的技术与工具"><a href="#涉及的技术与工具" class="headerlink" title="涉及的技术与工具"></a>涉及的技术与工具</h1><p>IDEA: Eclipse、VSCode<br>框架：Spring boot<br>项目依赖管理：Maven<br>前端：（html、Thymeleaf），<br>（html、JS、XMLHTTPRequest、live-server）<br>后台：Hibernate<br>数据库：MySql</p><h1 id="前后端不分离"><a href="#前后端不分离" class="headerlink" title="前后端不分离"></a>前后端不分离</h1><p>1、前端（Html、Thymeleaf）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action = &quot;/save&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    姓名：&lt;input type=&quot;text&quot; th:value=&quot;$&#123;name&#125;&quot; name=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">    年龄：&lt;input type=&quot;text&quot; th:value=&quot;$&#123;age&#125;&quot; name=&quot;age&quot;&gt;&lt;br/&gt;</span><br><span class="line">    简介：&lt;input type=&quot;text&quot; th:value=&quot;$&#123;info&#125;&quot; name=&quot;info&quot;&gt;&lt;br/&gt;</span><br><span class="line">    &lt;button&gt;save&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2、控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private UserService userService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/index&quot;)</span><br><span class="line">    public String index(Model model) &#123;</span><br><span class="line">        System.out.println(&quot;Index Success!!!&quot;);</span><br><span class="line">        model.addAttribute(&quot;name&quot;, &quot;bert&quot;);</span><br><span class="line">        model.addAttribute(&quot;age&quot;, &quot;21&quot;);</span><br><span class="line">        model.addAttribute(&quot;info&quot;, &quot;a man who like study&quot;);</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    @RequestMapping(&quot;/save&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String save(User user) &#123;</span><br><span class="line">        userService.save(user);</span><br><span class="line">        return user.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、模型（Hibernate）<br>实体类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name = &quot;user&quot;)</span><br><span class="line">public class User extends BaseBean &#123;</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line">private String info;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getInfo() &#123;</span><br><span class="line">return info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setInfo(String info) &#123;</span><br><span class="line">this.info = info;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据持久化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface CommonDao&lt;T extends BaseBean&gt; extends JpaRepository&lt;T, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h1><p>1、前端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;/js/vue.min-2.5.17.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;/js/vue-resource-v1.5.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;button onclick=&quot;postTest()&quot;&gt;发送&lt;/button&gt;</span><br><span class="line">            &lt;button onclick=&quot;getTest()&quot;&gt;获取&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function postTest()&#123;</span><br><span class="line">                var d = &#123;name:&quot;yang&quot;, age: 21, info: &quot;want to pass&quot;&#125;;</span><br><span class="line">                var xhr = new XMLHttpRequest();</span><br><span class="line">                xhr.open(&apos;POST&apos;, &apos;http://localhost/testPost&apos;, true);</span><br><span class="line">                xhr.setRequestHeader(&quot;Content-type&quot;,&quot;application/json&quot;);</span><br><span class="line">                xhr.send(JSON.stringify(d));</span><br><span class="line">                xhr.onreadystatechange = function () &#123;</span><br><span class="line">                    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">                        alert(xhr.responseText);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        alert(&quot;FAIL!&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            function getTest()&#123;</span><br><span class="line">                var xhr = new XMLHttpRequest();</span><br><span class="line">                xhr.open(&apos;GET&apos;, &apos;http://localhost/testGet&apos;, true);</span><br><span class="line">                xhr.responseType = &quot;text&quot;;</span><br><span class="line">                xhr.send();</span><br><span class="line">                // xhr.setRequestHeader(&quot;Content-type&quot;,&quot;application/json&quot;);</span><br><span class="line">                xhr.onreadystatechange = function () &#123;</span><br><span class="line">                    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line">                        alert(xhr.responseText);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else &#123;</span><br><span class="line">                        alert(&quot;FAIL!&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2、控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line">@CrossOrigin</span><br><span class="line">@RequestMapping(value = &quot;/testGet&quot;,method = RequestMethod.GET)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String testGet(@RequestBody(required = false) String req) &#123;</span><br><span class="line">System.out.println(&quot;Get Success!!! &quot; + req);</span><br><span class="line">return &quot;get data success!&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@CrossOrigin</span><br><span class="line">@RequestMapping(value = &quot;/testPost&quot;,method = RequestMethod.POST)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String testPost(@RequestBody JSONObject user) &#123;</span><br><span class="line">System.out.println(user.toString());</span><br><span class="line">return &quot;post data success!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>学习涞源：<a href="https://blog.csdn.net/sunnyzyq/article/details/86711708?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/sunnyzyq/article/details/86711708?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a><br>这位博主真的写的非常详细清晰，适合我这种入门小白。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;学习Springboot框架，初步尝试从前端打通到数据库的实验，但对知识未做太深的理解，仅从代码逻辑方面进行了分析与应用。&lt;
      
    
    </summary>
    
    
      <category term="Flutter" scheme="http://www.zhazhayang.top/categories/Flutter/"/>
    
    
      <category term="Spring boot" scheme="http://www.zhazhayang.top/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>ios常用设计模式</title>
    <link href="http://www.zhazhayang.top/archives/20190910-ios-DesignPattern/"/>
    <id>http://www.zhazhayang.top/archives/20190910-ios-DesignPattern/</id>
    <published>2019-09-10T15:04:15.000Z</published>
    <updated>2019-10-07T14:37:42.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>设计模式是特定场景下对特定问题的解决方案。以下介绍Cocoa框架下的其中4种设计模式：单例模式、委托者模式、观察者模式、MVC模式</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>定义：一个类只有一个实例，并提供一个全局访问点。<br>实现：单例模式一般会封装一个静态属性，并提供静态实例的创建方法。<br>class Singleton {<br>    static let sharedInstance = Singleton()<br>}</p><p>案例：<br>Cocoa Touch框架中的单例类<br>1、UIApplication：提供了应用程序的集中控制点来保持应用的状态。<br>shared方法：创建和获得UIApplication实例的静态方法。<br>isIdleTimerDisable属性：true默认情况系统会锁屏，false系统不会锁屏。<br>openURL方法：打开一些内置的ios应用。<br>2、UserDefaults：方便读取应用设置<br>standard方法：创建和获取NSUserDefaults实例的静态方法<br>3、NotificationCenter：信息广播通知，采用观察者模式的通知机制<br>default方法：创建和获取NotificaCenter的共享方法。<br>4、FileManager：文件系统通用操作<br>default方法：创建和获取FileManager的实例方法<br>5、Bundle:动态加载（卸载）可执行代码、定位资源文件、资源本地化和访问文件系统等功能。<br>main：创建和获取Bundle实例的共享方法。</p><h2 id="委托模式"><a href="#委托模式" class="headerlink" title="委托模式"></a>委托模式</h2><p>即代理模式，给其他对象提供一个委托，以控制对这个对象的访问。<br>实例：哲学家通过协议将工作方法委托给徒弟, 由徒弟去实现工作方法<br>class Philosoper: NSObject {<br>    var timer: NSTimer!<br>    var count: Int = 0<br>    var delegate: PhliosopherDelegate?</p><pre><code>func start() {    self.delegate?.work()}</code></pre><p>}</p><p>potocol PhilosopherDelegate {<br>    func work()<br>}</p><p>class ViewController: UIViewController, PhilosopherDelegate {<br>    override func viewDidLoad() {<br>        super.viewDidLoad()</p><pre><code>    let tom = Philosopher()    tom.delegate = self    tom.start()}func work() {    print(&quot;Working...&quot;)}</code></pre><p>}<br>案例：UITableViewDelegate、UITextFieldDelegate等等</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>解决问题：当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。<br>Cocoa Touch具体应用：通知机制、KVO机制<br>通知机制：广播通知，在应用中的多个对象之间发消息。在NSNotificationCenter的addObserver中添加消息接受对象，通知中心就会把消息广播给已添加的对象。<br>KVO机制：属性发生变化的对象发送消息给已添加的观察者，让其关注它的某个属性变化。</p><h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><p>Model-View-Controller<br>模型：保存应用程序数据的类<br>视图：包括窗口、控件、以及其他一些用户能够看到并与之交互的元素<br>控制器：把模型和视图绑定在一起的代码，包括处理用户输入的程序逻辑</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《ios开发指南》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;设计模式是特定场景下对特定问题的解决方案。以下介绍Cocoa框架下的其中4种设计模式：单例模式、委托者模式、观察者模式、MVC模式&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="ios" scheme="http://www.zhazhayang.top/categories/ios/"/>
    
    
      <category term="ios" scheme="http://www.zhazhayang.top/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>ios本地数据存储:属性列表</title>
    <link href="http://www.zhazhayang.top/archives/20190910-ios-PropertyList/"/>
    <id>http://www.zhazhayang.top/archives/20190910-ios-PropertyList/</id>
    <published>2019-09-10T10:56:01.000Z</published>
    <updated>2019-09-10T15:37:55.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>属性列表是ios本地数据持久化存储方式中的一种。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1、适用于存储比较轻量的数据<br>2、将静态数据包含在应用中的最佳方法<br>3、支持的数据类型为Foundation中的NSArray、NSDictionary、NSString、NSData、NSDate、NSNumber<br>4、无法将自定义对象序列化到属性列表中</p><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><img src="/archives/20190910-ios-PropertyList/propertyList.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">    @IBOutlet var lineFields: [UITextField]!</span><br><span class="line">    </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        // Do any additional setup after loading the view.</span><br><span class="line">        let fileURL = self.dataFileURL()</span><br><span class="line">        if FileManager.default.fileExists(atPath: fileURL.path!) &#123;</span><br><span class="line">            if let array = NSArray(contentsOf: fileURL as URL) as? [String] &#123; //获取plist中的内容</span><br><span class="line">                for i in 0..&lt;array.count &#123;</span><br><span class="line">                    lineFields[i].text = array[i] </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let app = UIApplication.shared</span><br><span class="line">        NotificationCenter.default.addObserver(self, selector: #selector(self.applicationWillResignActive(notification:)), name: UIApplication.willResignActiveNotification, object: app) </span><br><span class="line">        //当应用退出活跃状态时进行保存(进入后台状态)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @objc func applicationWillResignActive(notification: NSNotification) &#123;</span><br><span class="line">        let fileURL = self.dataFileURL()</span><br><span class="line">        let array = (self.lineFields as NSArray).value(forKey: &quot;text&quot;) as! NSArray</span><br><span class="line">        array.write(to: fileURL as URL, atomically: true) //写入到data.plist</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func dataFileURL() -&gt; NSURL &#123;</span><br><span class="line">        let urls = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask) //获取应用沙盒中Documents的路径</span><br><span class="line">        </span><br><span class="line">        var url:NSURL?</span><br><span class="line">        url = NSURL(fileURLWithPath: &quot;&quot;)</span><br><span class="line">        url = urls.first!.appendingPathComponent(&quot;data.plist&quot;) as NSURL</span><br><span class="line">        </span><br><span class="line">        return url!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>《精通ios开发》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;属性列表是ios本地数据持久化存储方式中的一种。&lt;/p&gt;
&lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="ios" scheme="http://www.zhazhayang.top/categories/ios/"/>
    
    
      <category term="ios" scheme="http://www.zhazhayang.top/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>ios 知识小点</title>
    <link href="http://www.zhazhayang.top/archives/20190907-ios-note/"/>
    <id>http://www.zhazhayang.top/archives/20190907-ios-note/</id>
    <published>2019-09-07T09:00:03.000Z</published>
    <updated>2019-09-07T14:43:18.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>主要记录ios学习与开发中遇到的小问题</p><h2 id="frame与bounds区别"><a href="#frame与bounds区别" class="headerlink" title="frame与bounds区别"></a>frame与bounds区别</h2><p>frame.origin 当前视图在父视图中的位置<br>bounds.origin 以当前视图左上角为原点构建坐标系，原点的值设置为该值而非(0,0)。影响的是其子视图的位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;主要记录ios学习与开发中遇到的小问题&lt;/p&gt;
&lt;h2 id=&quot;frame与bounds区别&quot;&gt;&lt;a href=&quot;#frame与bounds
      
    
    </summary>
    
    
      <category term="ios" scheme="http://www.zhazhayang.top/categories/ios/"/>
    
    
      <category term="ios" scheme="http://www.zhazhayang.top/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Mac开发之合成两段音频</title>
    <link href="http://www.zhazhayang.top/archives/20190814-OS-X-SynthesisAudio/"/>
    <id>http://www.zhazhayang.top/archives/20190814-OS-X-SynthesisAudio/</id>
    <published>2019-08-14T11:54:17.000Z</published>
    <updated>2019-08-14T12:42:10.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>合成两段音频，举例说明:将唱歌录音与伴奏合成为一首音乐</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let recordSetting = [AVSampleRateKey: NSNumber(value: 44100.0),//采样率,越高质量越好，音频CD一般为44.1kHz</span><br><span class="line"> AVFormatIDKey: NSNumber(value: kAudioFormatLinearPCM), //音频格式m4a</span><br><span class="line">AVLinearPCMBitDepthKey: NSNumber(value: 16), //采样位数，音频的解析度2^16，解析度越高，录制和回放的声音越真实</span><br><span class="line">AVNumberOfChannelsKey: NSNumber(value: 2), //通道数，单声道与立体声道</span><br><span class="line">AVEncoderAudioQualityKey: NSNumber(value: AVAudioQuality.min.rawValue) //录音质量</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">func blendAudio() -&gt; URL &#123;</span><br><span class="line">    let recordAsset = AVURLAsset(url: recordUrl, options: nil)</span><br><span class="line"></span><br><span class="line">    let accompanyAsset = AVURLAsset(url: accompanyUrl, options: nil) //媒体资源对象</span><br><span class="line">    let composition: AVMutableComposition = AVMutableComposition()  //轨道的集合，处理来自多个源媒体的数据</span><br><span class="line">    let appendedAudioTrack1: AVMutableCompositionTrack = composition.addMutableTrack(withMediaType: AVMediaType.audio, preferredTrackID: kCMPersistentTrackID_Invalid)! //一个轨道，即一个音轨</span><br><span class="line">    let appendedAudioTrack2: AVMutableCompositionTrack = composition.addMutableTrack(withMediaType: AVMediaType.audio, preferredTrackID: 0)!</span><br><span class="line">    let assetTrack1: AVAssetTrack = recordAsset.tracks(withMediaType: AVMediaType.audio)[0] //存储音频流媒体资源</span><br><span class="line">    let assetTrack2: AVAssetTrack = accompanyAsset.tracks(withMediaType: AVMediaType.audio)[0]</span><br><span class="line">    let timeRange1 = CMTimeRangeMake(start: CMTime.zero, duration: recordAsset.duration) //时间范围</span><br><span class="line">    let timeRange2 = CMTimeRangeMake(start: CMTime.zero, duration: accompanyAsset.duration)</span><br><span class="line">    do &#123;</span><br><span class="line">        try appendedAudioTrack1.insertTimeRange(timeRange1, of: assetTrack1, at: CMTime.zero)   //截取该时间范围的音频</span><br><span class="line">        try appendedAudioTrack2.insertTimeRange(timeRange2, of: assetTrack2, at: CMTime.zero)</span><br><span class="line">    &#125; catch &#123;</span><br><span class="line">        print(&quot;拼接失败了！&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    let export: AVAssetExportSession = AVAssetExportSession(asset: composition, presetName: AVAssetExportPresetAppleM4A)! </span><br><span class="line">    //对asset编码，导出指定的格式</span><br><span class="line">    </span><br><span class="line">    let path = directoryPath + &quot;/song1.m4a&quot;</span><br><span class="line">    let url = URL(fileURLWithPath: path)</span><br><span class="line">    export.outputURL = url  //导出路径</span><br><span class="line">    export.outputFileType = AVFileType.m4a  //导出文件格式</span><br><span class="line">    export.exportAsynchronously (   //异步导出</span><br><span class="line">        completionHandler: &#123; () -&gt; Void in</span><br><span class="line">            print(&quot;export...&quot;, export)</span><br><span class="line">            switch export.status &#123;</span><br><span class="line">            case .failed:</span><br><span class="line">                print(&quot;导出失败了！&quot;)</span><br><span class="line">                break</span><br><span class="line">            case .completed:</span><br><span class="line">                print(&quot;导出成功！&quot;)</span><br><span class="line">                break</span><br><span class="line">            case .waiting:</span><br><span class="line">                print(&quot;正在导出中...&quot;)</span><br><span class="line">                break</span><br><span class="line">            default:</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">        return url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;合成两段音频，举例说明:将唱歌录音与伴奏合成为一首音乐&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/categories/OS-X/"/>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>NSOpenel和NSSavePanel,Data magic number</title>
    <link href="http://www.zhazhayang.top/archives/20190814-OS-X-Open-Save-Panel/"/>
    <id>http://www.zhazhayang.top/archives/20190814-OS-X-Open-Save-Panel/</id>
    <published>2019-08-14T10:25:51.000Z</published>
    <updated>2019-08-14T11:51:55.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>NSOpenPanel选择电脑的文件，NSSavePanel保存文件到电脑</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>NSOpenPanel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private func openPanel(types typesName: [String]) &#123;</span><br><span class="line">    let openPanel: NSOpenPanel = NSOpenPanel()</span><br><span class="line">    openPanel.canChooseDirectories = false //选择文件夹</span><br><span class="line">    openPanel.canChooseFiles = true //选择文件</span><br><span class="line">    openPanel.allowsMultipleSelection = false //多选</span><br><span class="line">    openPanel.allowedFileTypes = typesName //允许的文件格式</span><br><span class="line">    openPanel.beginSheetModal(for: self.view.window!) &#123; (response) in</span><br><span class="line">        if response.rawValue == NSApplication.ModalResponse.OK.rawValue &#123;</span><br><span class="line">            let selectedURL = openPanel.url! //获取选择的文件的路径</span><br><span class="line">            //写下你的代码进行处理</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NSSavePanel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func savePanel(recordData data: NSData) &#123;</span><br><span class="line">    let panel = NSSavePanel()</span><br><span class="line">    panel.title = &quot;导出音乐&quot;</span><br><span class="line">    panel.canCreateDirectories = true </span><br><span class="line">    panel.showsTagField = false //</span><br><span class="line">    panel.allowedFileTypes = [&quot;m4a&quot;] //允许保存的格式</span><br><span class="line">    panel.level = NSWindow.Level(rawValue: Int(CGWindowLevelForKey(.modalPanelWindow)))</span><br><span class="line">    panel.begin &#123; (result) in</span><br><span class="line">        if result.rawValue == NSApplication.ModalResponse.OK.rawValue &#123;</span><br><span class="line">            let url = panel.url!  //获取选择的路径</span><br><span class="line">            data.write(to: url, atomically: true)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// 此处实现将NSData中保存的Audio文件导出<br>注：Data保存的数据的头部有个称为magic number的数字，其表示的是文件格式<br>获取方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func mimeType(for data: Data) -&gt; String? &#123;</span><br><span class="line">    var b: UInt8 = 0</span><br><span class="line">    data.copyBytes(to: &amp;b, count: 1)</span><br><span class="line">    switch b &#123;</span><br><span class="line">    case 0x52:</span><br><span class="line">        return &quot;wav&quot;</span><br><span class="line">    case 0x49:</span><br><span class="line">        return &quot;mp3&quot;</span><br><span class="line">    default:</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;NSOpenPanel选择电脑的文件，NSSavePanel保存文件到电脑&lt;/p&gt;
&lt;h2 id=&quot;代码示例&quot;&gt;&lt;a href=&quot;#代码示例
      
    
    </summary>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/categories/OS-X/"/>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>口琴练习Mac应用软件：口琴呀</title>
    <link href="http://www.zhazhayang.top/archives/20190814-OS-X-HarmonicaApplication/"/>
    <id>http://www.zhazhayang.top/archives/20190814-OS-X-HarmonicaApplication/</id>
    <published>2019-08-14T09:40:09.000Z</published>
    <updated>2019-09-08T02:36:47.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="/download/Harmonica.dmg">口琴呀 Version 1.0 点击下载</a> 2019-08</p><p><a href="/download/Harmonica-1.1.dmg">口琴呀 Version 1.1 点击下载</a> 2019-09<br>1.修正点击取消会退出应用的bug<br>2.修正有些电脑无法初始化录音的bug</p><h2 id="开发说明"><a href="#开发说明" class="headerlink" title="开发说明"></a>开发说明</h2><p>进行口琴练习的时候，发现使用用纸质曲谱，用手机播放伴奏，用手机录音，挺不方便的，因此想将这些东西集合成一个软件。现在推出第一个版本。后期有机会的话会开发网络功能，提供曲谱、音乐分享等功能，打造口琴圈子。</p><h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><p>1、查看曲谱<br>2、播放伴奏<br>3、听伴奏录音<br>4、录音与伴奏合成音乐<br>5、播放录音</p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><img src="/archives/20190814-OS-X-HarmonicaApplication/harmonica1.png"><img src="/archives/20190814-OS-X-HarmonicaApplication/Harmonica2.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;/download/Harmonica.dmg&quot;&gt;口琴呀 Version 1.0 点击下载&lt;/a&gt; 2019-08&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/categories/OS-X/"/>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>Mac加载动画，纯文本</title>
    <link href="http://www.zhazhayang.top/archives/20190813-OS-X-LoadingPanel/"/>
    <id>http://www.zhazhayang.top/archives/20190813-OS-X-LoadingPanel/</id>
    <published>2019-08-13T14:00:18.000Z</published>
    <updated>2019-08-13T14:30:40.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正在加载的时候显示的动画</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/archives/20190813-OS-X-LoadingPanel/loading.png"><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>TextHUD.swift</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">class TextHUD: NSObject &#123;</span><br><span class="line">    var view: NSView!</span><br><span class="line">    var timer: Timer!</span><br><span class="line">    func showWaitingWithText(size: NSSize, text: String, autoRemove: Bool) &#123;</span><br><span class="line">        view = WaitingTextView(frame: NSRect(x: 0, y: 0, width: size.width, height: size.height))</span><br><span class="line">        view.wantsLayer = true</span><br><span class="line">        view.layer?.backgroundColor = CGColor(gray: 0.5, alpha: 0.5)</span><br><span class="line">        let label = NSTextField(labelWithString: text)</span><br><span class="line">        label.isEditable = false</span><br><span class="line">        label.isBordered = false</span><br><span class="line">        label.frame.size = NSSize(width: 200, height: 40)</span><br><span class="line">        label.frame.origin = NSPoint(x: (size.width / 2 - 100), y: (size.height / 2 - 20))</span><br><span class="line">        label.font = NSFont(name: &quot;Arial&quot;, size: 20)</span><br><span class="line">        label.alignment = NSTextAlignment.left</span><br><span class="line">        view.addSubview(label)</span><br><span class="line">        let window = NSApplication.shared.keyWindow</span><br><span class="line">        window?.contentView?.addSubview(view)</span><br><span class="line">        </span><br><span class="line">        //使用Timer实现动画效果</span><br><span class="line">        timer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: true, block: &#123; (timer) in</span><br><span class="line">            switch label.stringValue &#123;</span><br><span class="line">            case text:</span><br><span class="line">                label.stringValue = text + &quot;。&quot;</span><br><span class="line">                break</span><br><span class="line">            case text + &quot;。&quot;:</span><br><span class="line">                label.stringValue = text + &quot;。。&quot;</span><br><span class="line">                break</span><br><span class="line">            case text + &quot;。。&quot;:</span><br><span class="line">                label.stringValue = text + &quot;。。。&quot;</span><br><span class="line">                break</span><br><span class="line">            case text + &quot;。。。&quot;:</span><br><span class="line">                label.stringValue = text</span><br><span class="line">                break</span><br><span class="line">            default:</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        if autoRemove &#123;</span><br><span class="line">            let selec = #selector(removeHUD(_:))</span><br><span class="line">            perform(selec, with: window, afterDelay: 15)</span><br><span class="line">        &#125;</span><br><span class="line">        //let activity</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @objc func removeHUD(_ object: AnyObject) &#123;</span><br><span class="line">        view.removeFromSuperview()</span><br><span class="line">        if timer != nil &#123;</span><br><span class="line">            timer.invalidate()</span><br><span class="line">            timer = nil</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WaitingTextView.swift<br>注：在窗口加载多一层View的时候，发现点击事件可以穿透到底层的View，而我想实现的是，正在加载的时候，不响应用户的操作，但是Mac没有ios UserInterationEnabled属性。此处的解决方案是，重载顶层View的点击事件，响应的时候不做任何事情，以此防止底层的view来响应点击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">class WaitingTextView: NSView &#123;</span><br><span class="line"></span><br><span class="line">    override func draw(_ dirtyRect: NSRect) &#123;</span><br><span class="line">        super.draw(dirtyRect)</span><br><span class="line"></span><br><span class="line">        // Drawing code here.</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func mouseDown(with event: NSEvent) &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考来源："><a href="#参考来源：" class="headerlink" title="参考来源："></a>参考来源：</h2><p><a href="https://github.com/0x1306a94/SJProgressHUD" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/0x1306a94/SJProgressHUD</a>  ios的加载动画<br><a href="https://github.com/qq2223996838/MacProgressHUD" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/qq2223996838/MacProgressHUD</a>  mac的加载动画(objective-c)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;正在加载的时候显示的动画&lt;/p&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效
      
    
    </summary>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/categories/OS-X/"/>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>NSOutlineView示例</title>
    <link href="http://www.zhazhayang.top/archives/20190726-OS-X-NSOutlineView/"/>
    <id>http://www.zhazhayang.top/archives/20190726-OS-X-NSOutlineView/</id>
    <published>2019-07-26T06:10:23.000Z</published>
    <updated>2019-07-26T06:34:22.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>NSOutlineView的效果就是XCode左边的项目目录列表</p><h2 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h2><p>RootSongName为一个结点，LeafRecord为结点下的目录<br>即一个歌曲的文件，下面有多个录音</p><h2 id="代码-详细说明看代码注释"><a href="#代码-详细说明看代码注释" class="headerlink" title="代码(详细说明看代码注释)"></a>代码(详细说明看代码注释)</h2><p>SoudData.swift</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">class RootSongName: NSObject &#123; //根目录</span><br><span class="line">    var songName: String!</span><br><span class="line">    var children = [LeafRecord]() //根目录下的子目录</span><br><span class="line">    init(songName name: String) &#123;</span><br><span class="line">        self.songName = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class LeafRecord: NSObject &#123; //子目录</span><br><span class="line">    var recordName:String!</span><br><span class="line">    //var recordData:NSData!</span><br><span class="line">    </span><br><span class="line">    init(name n: String) &#123;</span><br><span class="line">        self.recordName = n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SoundRecordController.swift</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">class SoundRecordController: NSViewController &#123;</span><br><span class="line"></span><br><span class="line">    @IBOutlet weak var outlineView: NSOutlineView!</span><br><span class="line">    </span><br><span class="line">    var song = [RootSongName]()</span><br><span class="line">    </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        // Do view setup here.</span><br><span class="line">        setSoundRecordData()    //建立测试数据</span><br><span class="line">        outlineView.dataSource = self</span><br><span class="line">        outlineView.delegate = self</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func setSoundRecordData() &#123;</span><br><span class="line">        var root: RootSongName!</span><br><span class="line">        var leaf: LeafRecord!</span><br><span class="line">        for i in 0...4 &#123;</span><br><span class="line">            var record = [LeafRecord]()</span><br><span class="line">            root = RootSongName(songName: String(i))</span><br><span class="line">            for j in 11...13 &#123;</span><br><span class="line">                leaf = LeafRecord(name: String(j))</span><br><span class="line">                record.append(leaf)</span><br><span class="line">            &#125;</span><br><span class="line">            root.children = record</span><br><span class="line">            song.append(root)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//初始化时,每次执行的分支都是根目录；后面点击时，执行的是子目录；执行顺序都是以下函数的顺序</span><br><span class="line">extension SoundRecordController: NSOutlineViewDataSource &#123;</span><br><span class="line">    func outlineView(_ outlineView: NSOutlineView, numberOfChildrenOfItem item: Any?) -&gt; Int &#123;  </span><br><span class="line">        if let item = item as? RootSongName &#123;</span><br><span class="line">            return item.children.count //分别返回每个根目录下的子目录数量</span><br><span class="line">        &#125;</span><br><span class="line">        return song.count   //返回根目录的数量</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func outlineView(_ outlineView: NSOutlineView, child index: Int, ofItem item: Any?) -&gt; Any &#123;</span><br><span class="line">        if let item = item as? RootSongName &#123;</span><br><span class="line">            return item.children[index] //返回子目录</span><br><span class="line">        &#125;</span><br><span class="line">        return song[index]  //返回根目录</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func outlineView(_ outlineView: NSOutlineView, isItemExpandable item: Any) -&gt; Bool &#123;</span><br><span class="line">        return item is RootSongName //根目录展开</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//生成tableViewCell数据，初始化时生成HeaderCell，点击根目录则生成DataCell</span><br><span class="line">extension SoundRecordController: NSOutlineViewDelegate &#123;</span><br><span class="line">    func outlineView(_ outlineView: NSOutlineView, viewFor tableColumn: NSTableColumn?, item: Any) -&gt; NSView? &#123;</span><br><span class="line">        var cell: NSTableCellView!</span><br><span class="line">        if item is RootSongName &#123;</span><br><span class="line">            cell = outlineView.makeView(withIdentifier: NSUserInterfaceItemIdentifier(rawValue: &quot;HeaderCell&quot;), owner: self) as? NSTableCellView</span><br><span class="line">            cell?.textField?.stringValue = (item as! RootSongName).songName</span><br><span class="line">        &#125; else if item is LeafRecord &#123;</span><br><span class="line">            cell = outlineView.makeView(withIdentifier: NSUserInterfaceItemIdentifier(rawValue: &quot;DataCell&quot;), owner: self) as? NSTableCellView</span><br><span class="line">            cell?.textField?.stringValue = (item as! LeafRecord).recordName</span><br><span class="line">        &#125;</span><br><span class="line">        return cell</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/archives/20190726-OS-X-NSOutlineView/outlineView.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;NSOutlineView的效果就是XCode左边的项目目录列表&lt;/p&gt;
&lt;h2 id=&quot;示例说明&quot;&gt;&lt;a href=&quot;#示例说明&quot; cla
      
    
    </summary>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/categories/OS-X/"/>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>AVAudioPlayer的使用，Timer实现播放进度</title>
    <link href="http://www.zhazhayang.top/archives/20190725-OS-X-AVAudioPlayer/"/>
    <id>http://www.zhazhayang.top/archives/20190725-OS-X-AVAudioPlayer/</id>
    <published>2019-07-25T14:51:39.000Z</published>
    <updated>2019-07-25T15:17:55.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>AVAudioPlayer如其名，播放音频，但是它并没有显示播放进度的委托方法。这里采用Timer计时的方式实现播放进度条</p><h2 id="使用音乐（或图片）资源"><a href="#使用音乐（或图片）资源" class="headerlink" title="使用音乐（或图片）资源"></a>使用音乐（或图片）资源</h2><p>在项目中新建一个Resource文件夹，将文件拖入，选择Copy items if needed<br>let resourceUrl = Bundle.main.url(forResource: “星月神话”, withExtension: “mp3”)获取资源</p><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">//  ViewController.swift</span><br><span class="line">//  TryPlayAudio</span><br><span class="line">//</span><br><span class="line">//  Created by yang on 2019/7/23.</span><br><span class="line">//  Copyright © 2019 yang. All rights reserved.</span><br><span class="line"></span><br><span class="line">import Cocoa</span><br><span class="line">import AVFoundation</span><br><span class="line"></span><br><span class="line">class ViewController: NSViewController &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    @IBOutlet weak var timeSlider: NSSlider!</span><br><span class="line">    @IBOutlet weak var timeLabel: NSTextField!</span><br><span class="line">    </span><br><span class="line">    var audioPlayer: AVAudioPlayer!</span><br><span class="line">    var data: NSData!</span><br><span class="line">    var timer: Timer!</span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        // Do any additional setup after loading the view.</span><br><span class="line">        let resourceUrl = Bundle.main.url(forResource: &quot;星月神话&quot;, withExtension: &quot;mp3&quot;)</span><br><span class="line">        data = NSData(contentsOf: resourceUrl!)</span><br><span class="line">        do &#123;</span><br><span class="line">            audioPlayer = try AVAudioPlayer(data: data as Data) //本地音频可直接用contentOf: URL方法</span><br><span class="line">        &#125; catch &#123;</span><br><span class="line">            print(&quot;初始化失败&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        if audioPlayer != nil &#123;</span><br><span class="line">            audioPlayer.volume = 0.7    //调节音量</span><br><span class="line">            timeSlider.maxValue = audioPlayer.duration  //获取总时长</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override var representedObject: Any? &#123;</span><br><span class="line">        didSet &#123;</span><br><span class="line">        // Update the view, if already loaded.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @objc func tickTime() &#123; //Timer调度的方法，每一个时间间隔执行一次，1秒/次即可实现进度条</span><br><span class="line">        timeSlider.integerValue += 1</span><br><span class="line">        timeLabel.stringValue = String(self.timeSlider.integerValue)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @IBAction func play(_ sender: NSButton) &#123;</span><br><span class="line">        audioPlayer.play() //播放</span><br><span class="line">        timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(self.tickTime), userInfo: nil, repeats: true) </span><br><span class="line">        /*timer初始化，timeInterval时间间隔；selector选择器，即每一个时间间隔向选择器发送一次消息（调用self.tickTime函数）；repeats一直重复，否则只执行一次*/</span><br><span class="line">        if audioPlayer.isPlaying &#123;</span><br><span class="line">            print(&quot;播放中&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @IBAction func stop(_ sender: NSButton) &#123;</span><br><span class="line">        audioPlayer.stop() //停止播放</span><br><span class="line">        timer.invalidate()  //停止Timer</span><br><span class="line">        if !audioPlayer.isPlaying &#123;</span><br><span class="line">            print(&quot;停止&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/archives/20190725-OS-X-AVAudioPlayer/play.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;AVAudioPlayer如其名，播放音频，但是它并没有显示播放进度的委托方法。这里采用Timer计时的方式实现播放进度条&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/categories/OS-X/"/>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>Container Views添加子控制器</title>
    <link href="http://www.zhazhayang.top/archives/20190722-OS-X-ContainerView/"/>
    <id>http://www.zhazhayang.top/archives/20190722-OS-X-ContainerView/</id>
    <published>2019-07-22T05:59:21.000Z</published>
    <updated>2019-07-22T06:26:06.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Container Views是另一个视图的占位，可以用于转换视图、添加子控制器</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>1、在Container View中右键连接另一个控制器，选择embed选项进行嵌入</p><img src="/archives/20190722-OS-X-ContainerView/result.png"><p>2、点击Scene中的Embed segue，设置其Identifier属性<br>3、在主控制器中重载prepare函数,将子控制器设置为segue指向的控制器，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">override func prepare(for segue: NSStoryboardSegue, sender: Any?) &#123;</span><br><span class="line">    if segue.identifier == &quot;TOMAINTAB&quot; &#123;</span><br><span class="line">        mainTabController = segue.destinationController as? MainTabController</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Container Views是另一个视图的占位，可以用于转换视图、添加子控制器&lt;/p&gt;
&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot;
      
    
    </summary>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/categories/OS-X/"/>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>二维数组</title>
    <link href="http://www.zhazhayang.top/archives/20190720-struct-data-two-dimension/"/>
    <id>http://www.zhazhayang.top/archives/20190720-struct-data-two-dimension/</id>
    <published>2019-07-20T05:38:51.000Z</published>
    <updated>2019-07-20T05:57:00.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>题目和解法来源《剑指Offer》</p><h2 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h2><p>行从左到右递增，列从上到下递增的二维数组，判断一个整数是否在该数组中</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>算法步骤：<br>1、与列最小比较，若num比其小，即可排除该列<br>2、与行最大比较，若num比其大，即可排除该行</p><p>算法实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">bool FindNumInTwoDimension(int* a, int columns, int rows, int num)</span><br><span class="line">&#123;</span><br><span class="line">int i=0,j=columns-1;</span><br><span class="line">for (int i = 0;i &lt; rows;i++)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = 0;j &lt; columns;j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; a[i*columns + j] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">if ((a != NULL)&amp;&amp;(rows&gt;0)&amp;&amp;(columns&gt;0))</span><br><span class="line">&#123;</span><br><span class="line">while (i&lt;rows &amp;&amp; j&gt;=0)</span><br><span class="line">&#123;</span><br><span class="line">if (a[i * columns + j] == num)</span><br><span class="line">return true;</span><br><span class="line">else if (a[i * columns + j] &gt; num)</span><br><span class="line">j--;</span><br><span class="line">else</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="我的思考"><a href="#我的思考" class="headerlink" title="我的思考"></a>我的思考</h2><p>1、第一行中找出x1和x2满足，x1&lt;num&lt;x2<br>2、第一列中找出y1和y2满足，y1&lt;num&lt;y2<br>3、x=0, y=0,（x1, 0）与（0, y1）构成的直线，（x2, 0）与（0, y2）构成的直线<br>4、要找的数在四条直线构成的区域当中<br>ps：感觉实现起来比较复杂</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;题目和解法来源《剑指Offer》&lt;/p&gt;
&lt;h2 id=&quot;题目4&quot;&gt;&lt;a href=&quot;#题目4&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://www.zhazhayang.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://www.zhazhayang.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="http://www.zhazhayang.top/archives/20190718-struct-data-array/"/>
    <id>http://www.zhazhayang.top/archives/20190718-struct-data-array/</id>
    <published>2019-07-18T14:28:11.000Z</published>
    <updated>2019-07-20T05:47:01.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>题目来源《剑指Offer》面试题3：数组中重复的数字</p><h2 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h2><p>在一个长度为n的数组里的所有数字都在0~n-1的范围内，数组中的某些数字是重复的，但不知几个数字重复，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。<br>实现思想：将与数组下标相同的数字存放到该位置，当发现重复数字时返回<br>算法步骤：<br>1、读取第i个数组元素<br>2、读取的数字与元素下标比较<br>3、<br>（1）不相同时，<br>比较该数字与数组下标为该数字的元素比较，<br>若相同，则该数字为重复数字，返回该数字；<br>若不相同，则交换这两个元素；<br>i不变并重复123<br>（2）相同时，i++并重复123<br>实现代码：<br>C++</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int checkNumberDuplication(int num[],int length)</span><br><span class="line">&#123;</span><br><span class="line">if (num == NULL||length&lt;=1)</span><br><span class="line">return -1;</span><br><span class="line">for (int i = 0;i &lt; length;i++)</span><br><span class="line">&#123;</span><br><span class="line">if (num[i] &gt;= length || num[i] &lt; 0|| num[num[i]]&gt;=length|| num[num[i]] &lt;0)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt; &quot;数组不符合条件！&quot;;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">if (num[i] != i)</span><br><span class="line">&#123;</span><br><span class="line">if (num[i] == num[num[i]])</span><br><span class="line">return num[i];</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">int temp;</span><br><span class="line">temp = num[num[i]];</span><br><span class="line">num[num[i]]=num[i];</span><br><span class="line">num[i] = temp;</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h2><p>不修改数组，在一个长度为n+1的数组里的所有数字都在1~n范围内，所以数组中至少有一个数字是重复的。找出数组中任意一个重复的数字。<br>方案一: 在题目1解法的基础上增加一个长度相等的数组，算法空间复杂度为O(n)<br>方案二：统计1~n/2在数组中出现的次数，大于1~n/2的长度,则重复数字在1~n/2，否则，在n/2到n；重复该步骤找出重复数字，算法时间复杂度O(nlogn)</p><p>方案二实现：<br>算法步骤：<br>1、数字分半<br>2、取前半段，统计其在数组中出现的次数<br>（1）若大于前半段长度，则取前半段进行递归重复12<br>（2）否则，取后半段进行递归重复12<br>3、递归退出条件，当数字长度&lt;=2时，分别统计其在数组中出现的长度，<br>若&gt;=2,则发现记录重复数字并返回；否则，直接返回<br>Objective-C代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">void findRepeatNum(int from, int to, FindRepeat *f)</span><br><span class="line">&#123;</span><br><span class="line">    int times, middle, all_len, middle_len;</span><br><span class="line">    middle = (to + from) / 2;</span><br><span class="line">    all_len = to - from + 1;</span><br><span class="line">    middle_len = middle - from + 1;</span><br><span class="line">    if(all_len &lt;= 2)</span><br><span class="line">    &#123;</span><br><span class="line">        times = [f statisticsTimes:from :from];</span><br><span class="line">        if(times &gt; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            [f setRepeatNum:from];</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        times = [f statisticsTimes:to:to];</span><br><span class="line">        if(times &lt;= 1)</span><br><span class="line">            [f setRepeatNum:0];</span><br><span class="line">        else</span><br><span class="line">            [f setRepeatNum:to];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        times = [f statisticsTimes:from :middle];</span><br><span class="line">        if(times &gt; middle_len)</span><br><span class="line">            findRepeatNum(from, middle, f);</span><br><span class="line">        else</span><br><span class="line">            findRepeatNum(middle, to, f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;题目来源《剑指Offer》面试题3：数组中重复的数字&lt;/p&gt;
&lt;h2 id=&quot;题目2&quot;&gt;&lt;a href=&quot;#题目2&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://www.zhazhayang.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://www.zhazhayang.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>NSTableView、NSTabView简单实例，实现app简单布局</title>
    <link href="http://www.zhazhayang.top/archives/20190717-OS-X-NSTableView/"/>
    <id>http://www.zhazhayang.top/archives/20190717-OS-X-NSTableView/</id>
    <published>2019-07-17T14:31:50.000Z</published>
    <updated>2019-07-21T15:52:00.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>AppKit的NSTableView的简单使用<br>效果如下</p><img src="/archives/20190717-OS-X-NSTableView/nstableview.png"><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1、从控件库中拖出Table View到View Controller的场景中<br>2、将Table View的Columns属性设置为1<br>3、修改Table Column的Tittle属性<br>4、设置Table View Cell的identifier的值，用于标识这个view，可以指定或找出<br>5、在Text Cell的Font属性中将字体调大<br>6、将Table View与ViewControler类用@IBoutlet建立联系 (声明对象与引用对象)<br>知识小点：IBoutlet的方式会占用内存，当连接过多的View时可以采用Tab View<br>7、编写代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">class ViewController: NSViewController, NSTableViewDataSource, NSTableViewDelegate &#123;</span><br><span class="line"></span><br><span class="line">    @IBOutlet weak var tableView: NSTableView!</span><br><span class="line">    </span><br><span class="line">    private let menus = [&quot;我的曲谱&quot;, &quot;我的录音&quot;, &quot;曲谱下载&quot;]</span><br><span class="line">    private let menusCellId = &quot;MusicID&quot;</span><br><span class="line">    </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        // Do any additional setup after loading the view.</span><br><span class="line">        tableView.delegate = self</span><br><span class="line">        tableView.dataSource = self</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override var representedObject: Any? &#123;</span><br><span class="line">        didSet &#123;</span><br><span class="line">        // Update the view, if already loaded.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func numberOfRows(in tableView: NSTableView) -&gt; Int &#123; //tableView中行数</span><br><span class="line">        return menus.count</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func tableView(_ tableView: NSTableView, viewFor tableColumn: NSTableColumn?, row: Int) -&gt; NSView? &#123;   //设置table cell中内容</span><br><span class="line">        if let cell = tableView.makeView(withIdentifier: NSUserInterfaceItemIdentifier(rawValue: menusCellId), owner: nil) as? NSTableCellView &#123;  //返回一个id为menusCellId的view</span><br><span class="line">            cell.textField?.stringValue = menus[row]</span><br><span class="line">            return cell</span><br><span class="line">        &#125;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func tableViewSelectionDidChange(_ notification: Notification) &#123;    //监测选择的方法</span><br><span class="line">        let selected = tableView.selectedRow;</span><br><span class="line">        let str = &quot;您选择了’&quot; + menus[selected] + &quot;‘！&quot;</span><br><span class="line">        let alert: NSAlert = NSAlert()  //提醒弹窗</span><br><span class="line">        alert.messageText = &quot;点击事件&quot;</span><br><span class="line">        alert.informativeText = str</span><br><span class="line">        alert.addButton(withTitle: &quot;是的&quot;)</span><br><span class="line">        alert.runModal()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NSTabView的使用"><a href="#NSTabView的使用" class="headerlink" title="NSTabView的使用"></a>NSTabView的使用</h2><p>效果如下：</p><img src="/archives/20190717-OS-X-NSTableView/nstabview1.png"><img src="/archives/20190717-OS-X-NSTableView/nstabview2.png"><p>1、拖出Tab View控件，属性设置：tabs为3，style为tabless<br>2、为每个tab的view添加标签Label，输入内容（方便测试tab view是否有切换）<br>2、在@IBOutlet weak var tableView: NSTableView!下方添加<br><code>@IBOutlet weak var tabView: NSTabView!</code><br>并与storyboard的Tab View建立连接<br>3、在viewDidLoad()方法最下方添加<code>tabView.delegate = self</code><br>4、在tableViewSelectionDidChange方法第二行添加<code>tabView.selectTabViewItem(at: selected)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;AppKit的NSTableView的简单使用&lt;br&gt;效果如下&lt;/p&gt;
&lt;img src=&quot;/archives/20190717-OS-X-
      
    
    </summary>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/categories/OS-X/"/>
    
    
      <category term="OS-X" scheme="http://www.zhazhayang.top/tags/OS-X/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C @property与@synthesize</title>
    <link href="http://www.zhazhayang.top/archives/20190716-Objective-C-property/"/>
    <id>http://www.zhazhayang.top/archives/20190716-Objective-C-property/</id>
    <published>2019-07-16T01:35:01.000Z</published>
    <updated>2019-07-16T09:13:55.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>@property和@synthesize指令使编译器自动生成合适的getter和setter</p><h2 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h2><p>格式：@property (特性) 类型 标识符<br>作用：声明访问器getter和setter<br>1、不使用@synthesize创建实例<br>编写访问器的命名规则</p><ul><li>(CurrencyConverter *currencyConverter; //getter</li><li>(void)setCurrencyConverter: (CurrencyConverter *)newValue; //setter<br>2、特性<br>（1）读写性<br>readwrite（默认值），@synthesize同时生成getter和setter<br>readonly，@synthesize只生成getter<br>（2）传入的值<br>assign（默认值），赋值<br>retain，旧值release，新值retain<br>copy，旧值release，将新值复制上去<br>当引入ARC时<br>strong，与retain相同<br>weak，与assign类似<br>（4）原子性<br>atomic（默认行为）仅一个线程访问变量实例，线程安全<br>nonatomic，允许多线访问，线程不安全</li></ul><h2 id="synthesize"><a href="#synthesize" class="headerlink" title="@synthesize"></a>@synthesize</h2><p>格式：@synthesize currencyConverter = _currencyConverter;<br>作用：创建访问器getter和setter</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;@property和@synthesize指令使编译器自动生成合适的getter和setter&lt;/p&gt;
&lt;h2 id=&quot;property&quot;&gt;
      
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://www.zhazhayang.top/categories/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="http://www.zhazhayang.top/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>顺序表与链表比较</title>
    <link href="http://www.zhazhayang.top/archives/20190715-struct-data-list/"/>
    <id>http://www.zhazhayang.top/archives/20190715-struct-data-list/</id>
    <published>2019-07-15T14:47:57.000Z</published>
    <updated>2019-07-15T15:28:11.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>顺序表和链表适合不同的情况</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>预先分配空间，可能会导致溢出或闲置，存储密度（有效数据空间/占用空间）为1；<br>存取元素的时间复杂度为O(1)，删除和插入元素的时间复杂度为O(n)；<br>适用情况：<br>1、已知数据长度的变化范围且变化不大<br>2、很少插入和删除的操作</p><p>声明和初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 100</span><br><span class="line">struct SequenceList</span><br><span class="line">&#123;</span><br><span class="line">    ElemType *e;</span><br><span class="line">    int length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool InitSequenceList(SequenceList &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">    L.e=new ElemType[MAXSIZE];</span><br><span class="line">    if(!L.e) </span><br><span class="line">        return false;</span><br><span class="line">    L.length = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>动态分配空间，存储密度小于1<br>存取元素的时间复杂度为O(n)，确定位置后删除和插入元素的时间复杂度为O(1)<br>适用情况：<br>1、数据长度较大<br>2、插入删除较多</p><p> 声明和初始化<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode</span><br><span class="line">&#123;</span><br><span class="line">    Elemtype *e;</span><br><span class="line">    LinkNode *next;</span><br><span class="line">&#125;*LinkList;</span><br><span class="line"></span><br><span class="line">bool InitLinkList(LinkList &amp;L)</span><br><span class="line">&#123;</span><br><span class="line">    L=new LinkNode;</span><br><span class="line">    L-&gt;next = NULL;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;顺序表和链表适合不同的情况&lt;/p&gt;
&lt;h2 id=&quot;顺序表&quot;&gt;&lt;a href=&quot;#顺序表&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://www.zhazhayang.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://www.zhazhayang.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C基础</title>
    <link href="http://www.zhazhayang.top/archives/20190713-Objective-C-base/"/>
    <id>http://www.zhazhayang.top/archives/20190713-Objective-C-base/</id>
    <published>2019-07-13T14:23:45.000Z</published>
    <updated>2019-07-15T14:46:22.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Objective-C 是C语言的扩展</p><h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        // insert code here...</span><br><span class="line">        NSMutableArray *array; //声明指向NSMUtableArray对象的指针变量</span><br><span class="line">        array = [ [NSMutableArray alloc] init ]; //使array指向新建的NSMutableArray对象</span><br><span class="line">        int i;</span><br><span class="line">        for( i = 0; i &lt; 10; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            NSNumber *newNumber = [ [NSNumber alloc] initWithInt:(i * 3) ]; //指针变量newNumber指向NSnumber对象</span><br><span class="line">            [array addObject:newNumber]; //array添加对象，array并没有复制NSNumber对象，仅保留了NSNumber对象的指针</span><br><span class="line">        &#125;</span><br><span class="line">        for( i = 0; i &lt; 10; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            NSNumber *numberToPoint = [array objectAtIndex:i];</span><br><span class="line">            NSLog(@&quot;The number at index %d is %@&quot;, i, numberToPoint); //%@打印对象</span><br><span class="line">            //注意第一个@代表Objective-C扩展的字符串NSString，NSString可以保存unicode字符</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NSlog支持的符号</p><img src="/archives/20190713-Objective-C-base/nslog_flag.png"><h2 id="编写自己的类"><a href="#编写自己的类" class="headerlink" title="编写自己的类"></a>编写自己的类</h2><p>实现功能：开两个彩票号，每个七天开一次</p><p>LotteryEntry.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#ifndef LotteryEntry_h</span><br><span class="line">#define LotteryEntry_h</span><br><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface LotteryEntry : NSObject &#123;  //继承NSObject</span><br><span class="line">    NSDate *entryDate; //成员变量</span><br><span class="line">    int firstNumber;</span><br><span class="line">    int secondNumber;</span><br><span class="line">&#125;</span><br><span class="line">- (void)prepareRandomNumbers; //声明方法</span><br><span class="line">- (void)setEntryDate: (NSDate *)date;</span><br><span class="line">- (NSDate *)entryDate;</span><br><span class="line">- (int)firstNumber;</span><br><span class="line">- (int)secondNumber;</span><br><span class="line">- (NSString *)description;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">#endif /* LotteryEntry_h */</span><br></pre></td></tr></table></figure><p>LotteryEntry.m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;LotteryEntry.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation LotteryEntry</span><br><span class="line"></span><br><span class="line">- (void)prepareRandomNumbers //生成两个随机数</span><br><span class="line">&#123;</span><br><span class="line">    firstNumber = random() % 100 + 1;</span><br><span class="line">    secondNumber = random() % 100 + 1;</span><br><span class="line">&#125;</span><br><span class="line">- (void)setEntryDate: (NSDate *)date //设置时间</span><br><span class="line">&#123;</span><br><span class="line">    entryDate = date;</span><br><span class="line">&#125;</span><br><span class="line">- (NSDate *)entryDate</span><br><span class="line">&#123;</span><br><span class="line">    return entryDate;</span><br><span class="line">&#125;</span><br><span class="line">- (int)firstNumber</span><br><span class="line">&#123;</span><br><span class="line">    return firstNumber;</span><br><span class="line">&#125;</span><br><span class="line">- (int)secondNumber</span><br><span class="line">&#123;</span><br><span class="line">    return secondNumber;</span><br><span class="line">&#125;</span><br><span class="line">- (NSString *)description</span><br><span class="line">&#123;</span><br><span class="line">    NSString *result;</span><br><span class="line">    NSDateFormatter *formatter = [ [NSDateFormatter alloc] init ];</span><br><span class="line">    formatter.dateFormat = [NSString stringWithFormat:@&quot;yyyy-MM-dd&quot;]; //时间格式</span><br><span class="line">    result = [ [NSString alloc] initWithFormat:@&quot;%@ = %d and %d&quot;, [formatter stringFormatDate:entryDate], firstNumber, secondNumber ];</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>main.m</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &quot;LotteryEntry.h&quot;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        // insert code here...</span><br><span class="line">        NSCalendar *now = [ [NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian ];</span><br><span class="line">        </span><br><span class="line">        srandom((unsigned int)time(NULL));</span><br><span class="line">        NSMutableArray *array;</span><br><span class="line">        array = [ [NSMutableArray alloc] init ];</span><br><span class="line">        int i;</span><br><span class="line">        for( i = 0; i &lt; 10; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            NSDate *iWeeksFromNow;</span><br><span class="line">            iWeeksFromNow = [now dateWithEra:21 year:2019 month:0 day:(i * 7) hour:0 minute:0 second:0 nanosecond:0]; //七天开一次</span><br><span class="line">            </span><br><span class="line">            LotteryEntry *newEntry = [ [LotteryEntry alloc] init ];</span><br><span class="line">            [newEntry prepareRandomNumbers];</span><br><span class="line">            [newEntry setEntryDate:iWeeksFromNow];</span><br><span class="line">            [array addObject:newEntry]; //newEntry对象的指针添加到array</span><br><span class="line">        &#125;</span><br><span class="line">        for(LotteryEntry *entryToPrint in array)</span><br><span class="line">        &#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;, entryToPrint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><img src="/archives/20190713-Objective-C-base/result.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Objective-C 是C语言的扩展&lt;/p&gt;
&lt;h2 id=&quot;简单实例&quot;&gt;&lt;a href=&quot;#简单实例&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://www.zhazhayang.top/categories/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="http://www.zhazhayang.top/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>C++知识小点</title>
    <link href="http://www.zhazhayang.top/archives/20190710-c-knownledge/"/>
    <id>http://www.zhazhayang.top/archives/20190710-c-knownledge/</id>
    <published>2019-07-10T03:40:19.000Z</published>
    <updated>2019-09-09T12:42:07.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录一些简单、细节的C++知识点</p><h2 id="int-main-、void-main"><a href="#int-main-、void-main" class="headerlink" title="int main()、void main()"></a>int main()、void main()</h2><p>C++:<br>标准定义是int main()<br>int main()与int main(void)都是指没有参数<br>int main(int argc, char* argv[]):<br>    主函数由系统命令调用; argc为参数个数，argv调用时输入的参数，其中argv[0]是程序名<br>C语言<br>int main(void)表示无参数<br>int main()表示不确定个参数<br>C99标准定义是int main(void)与int main(int argc, char* argv[])</p><p>综合：void main并不推荐，系统无法判断所调用的程序的状态</p><h2 id="int-i-for-与for-int-i"><a href="#int-i-for-与for-int-i" class="headerlink" title="int i; for(;;)与for(int i;;)"></a>int i; for(;;)与for(int i;;)</h2><p>这里是整型i的作用域不同</p><h2 id="i-与-i"><a href="#i-与-i" class="headerlink" title="i++与++i"></a>i++与++i</h2><p>i++是后缀运算<br>例：<br>i = 1;<br>j = i++;<br>这里j结果为1，i为2；<br>先将i的值赋值给j,再做++运算</p><p>num[i++] = num[j–];// 后缀运算，先num[i]=num[j],再i++，j–</p><p>++i是前缀运算<br>例：<br>i = 1;<br>j = ++i;<br>这里j的结果为2，i为2;<br> 先做++运算后，再把i的值赋给j;</p><p> num[++i] = num[–j];// 前缀运算，先++i，–j,再num[i]=num[j]</p><h2 id="‘-n’与std-endl区别"><a href="#‘-n’与std-endl区别" class="headerlink" title="‘\n’与std::endl区别"></a>‘\n’与std::endl区别</h2><p>cout&lt;&lt;endl; == cout&lt;&lt;’\n’&lt;&lt;flush;<br>std::endl是流操作输出换行符并刷新流缓冲区<br>传输数据称为流，cout是传输数据到屏幕，流的缓冲区存满后会自动刷新，需要时可以进行手动刷新。</p><h2 id="struct与typedef-struct"><a href="#struct与typedef-struct" class="headerlink" title="struct与typedef struct"></a>struct与typedef struct</h2><p>1、C语言中<br>（1）<br>typedef struct<br>{}Stu;<br>声明变量Stu x;<br>（2）<br>typedef struct Student<br>{}Stu;<br>Stu==struct Student，声明变量Stu x;</p><p>2、c++中<br>（1）<br>struct Student<br>{}stu;<br>stu是一个变量，声明变量需要Student x;<br>（2）<br>typedef struct Student<br>{}Stu;<br>Stu==struct Student,声明变量Stu x;</p><h2 id="字符串末尾的’-0’"><a href="#字符串末尾的’-0’" class="headerlink" title="字符串末尾的’/0’"></a>字符串末尾的’/0’</h2><p>声明字符串数组时，长度要+1用于存放结束符’\0’;<br>例：<br>char ch[2];<br>ch[0] = ‘c’;<br>ch[1] = ‘\0’;<br>自动分配数组空间，长度会多1，最后一位是’\0’;<br>例：<br>char ch[] = “Y”; //ch[0]==’Y’,ch[1]==’\0’</p><h2 id="关键字static"><a href="#关键字static" class="headerlink" title="关键字static"></a>关键字static</h2><p>其告知编辑器将变量存储在程序的全局（静态）存储区，而非盏空间。<br>1、将static用于函数的局部变量时，该值可以在多次调用中保持不变。<br>2、将static修饰全局变量时，其只能在当前文件被访问。<br>3、将static用于类的数据成员，该数据成员可以在该类的所有实例中共享。<br>4、static用于类的成员函数，该函数属于类而非对象（在其实例对象中不能访问），因为没有this指针（this指针包含当前对象的地址），而且该函数只能访问static修饰的成员。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文记录一些简单、细节的C++知识点&lt;/p&gt;
&lt;h2 id=&quot;int-main-、void-main&quot;&gt;&lt;a href=&quot;#int-main
      
    
    </summary>
    
    
      <category term="C++" scheme="http://www.zhazhayang.top/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.zhazhayang.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>编译原理总结</title>
    <link href="http://www.zhazhayang.top/archives/20190706-compilation-principle/"/>
    <id>http://www.zhazhayang.top/archives/20190706-compilation-principle/</id>
    <published>2019-07-06T00:44:02.000Z</published>
    <updated>2019-07-17T14:26:42.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天刚考完试，今天以目录概览的方式总结编译原理这门课。</p><h2 id="编译原理结构示意图"><a href="#编译原理结构示意图" class="headerlink" title="编译原理结构示意图"></a>编译原理结构示意图</h2><img src="/archives/20190706-compilation-principle/structure.png"><h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><p>1、单词符号一般有保留字、标识符、常数、运算符、界符<br>2、输出形式为二元式（单词种别，单词自身的值）<br>3、用状态转换图识别单词</p><h2 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h2><p>1、文法可以精确定义语言，依据文法可以构造识别语言的自动机<br>2、文法四元组G[S]=(VT, VN, S, ξ)，即终结符号集、非终结符号集、文法开始符、产生式<br>3、分析方法：<br>（1）自顶向下，从文法开始符推导出输入符号串：LL(1)分析器（不带回溯的非递归向下分析法）<br>（1）自底向上，从输入串归约到文法开始符：LR分析器（规范规约的自底向上的分析方法）</p><h2 id="语义分析和中间代码生成"><a href="#语义分析和中间代码生成" class="headerlink" title="语义分析和中间代码生成"></a>语义分析和中间代码生成</h2><p>审查每个语法成分的静态语义，若正确，则生成与该语言成分等效的中间代码。<br>语义描述方法：属性文法。<br>常见的中间语言：抽象语法树、逆波兰表示法、三地址代码。</p><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>对代码进行等价的转换，使其具有更高的时间效率和空间效率<br>1、局部优化：基本块的DAG方法<br>2、循环优化：代码外提、强度削弱、删除归纳变量<br>3、全局优化</p><h2 id="目标代码生成"><a href="#目标代码生成" class="headerlink" title="目标代码生成"></a>目标代码生成</h2><p>把语法分析或者优化后的中间代码变换成目标代码，一般有三钟形式<br>1、机器语言语言代码<br>2、待装配的机器语言模块<br>3、汇编语言程序</p><h2 id="符号表与错误处理"><a href="#符号表与错误处理" class="headerlink" title="符号表与错误处理"></a>符号表与错误处理</h2><p>1、符号表让编译程序在其工作工程中建立并保存一批表格，如常数表、变量名表、数组内情向量表等。<br>2、错误处理<br>（1）语法错误，词法分析阶段与语法分析阶段的出现的错误，如关键字错误、语法成分不合规则<br>（2）语义错误，主要来源对源程序对某些量的不正确引用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天刚考完试，今天以目录概览的方式总结编译原理这门课。&lt;/p&gt;
&lt;h2 id=&quot;编译原理结构示意图&quot;&gt;&lt;a href=&quot;#编译原理结构示意图
      
    
    </summary>
    
    
      <category term="编译原理总结" scheme="http://www.zhazhayang.top/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="编译原理总结" scheme="http://www.zhazhayang.top/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客添加valine评论功能，设置第三方邮件通知提醒</title>
    <link href="http://www.zhazhayang.top/archives/20190706-add-comment/"/>
    <id>http://www.zhazhayang.top/archives/20190706-add-comment/</id>
    <published>2019-07-05T16:39:02.000Z</published>
    <updated>2019-07-14T11:47:44.600Z</updated>
    
    <content type="html"><![CDATA[<p>直奔主题！</p><p>第一步：leancloud配置<br>1、注册和实名认证leancloud：<a href="https://www.leancloud.cn/" rel="external nofollow noopener noreferrer" target="_blank">https://www.leancloud.cn/</a><br>2、创建应用<br>3、打开新创建的应用的设置<br>4、填上安全中心里面的Web安全域</p><img src="/archives/20190706-add-comment/web_scure.png"><p>5、修改邮件模板里面的重设密码的模板，如下图</p><img src="/archives/20190706-add-comment/re_password.png"><p>第二步：hexo项目文件的设置<br>设置NexT主题配置文件的valine字段<br>enable设为true<br>appid和appkey从leancloud的应用设置的应用Key中拷贝<br>notify字段设为true<br>placeholder字段为评论编辑框的占位符</p><img src="/archives/20190706-add-comment/valine_enable.png"><p>第三步：设置第三方邮件通知<br><a href="https://github.com/zhaojun1998/Valine-Admin" rel="external nofollow noopener noreferrer" target="_blank">Valine-Admin (by@zhaojun1998)</a><br>这里toulan就不讲了，参见其博客：<a href="http://www.zhaojun.im/hexo-valine-admin/#" rel="external nofollow noopener noreferrer" target="_blank">http://www.zhaojun.im/hexo-valine-admin/#</a><br>注意注意：测试的时候，评论里留下的邮箱不能是环境变量里的 <code>SMTP_USER</code> 或 <code>TO_EMAIL</code> 里的邮箱。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直奔主题！&lt;/p&gt;
&lt;p&gt;第一步：leancloud配置&lt;br&gt;1、注册和实名认证leancloud：&lt;a href=&quot;https://www.leancloud.cn/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target
      
    
    </summary>
    
    
      <category term="搭建博客" scheme="http://www.zhazhayang.top/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://www.zhazhayang.top/tags/Hexo/"/>
    
      <category term="个人博客" scheme="http://www.zhazhayang.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
